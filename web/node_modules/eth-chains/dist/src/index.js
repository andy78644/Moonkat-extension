"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.chain = exports.chains = exports.ChainId = exports.ChainName = void 0;
var chains_1 = require("./chains");
Object.defineProperty(exports, "chains", { enumerable: true, get: function () { return chains_1.chains; } });
var enums_1 = require("./enums");
var enums_2 = require("./enums");
Object.defineProperty(exports, "ChainName", { enumerable: true, get: function () { return enums_2.ChainName; } });
Object.defineProperty(exports, "ChainId", { enumerable: true, get: function () { return enums_2.ChainId; } });
/**
 * Get a chain by its `id`.
 * @param id - The `id` of the chain
 * @returns The `Chain` object associated with the chain `id`
 */
var getById = function (id) { return chains_1.chains[id]; };
/**
 * Get a chain by its `name`.
 * @param name - The `name` of the chain
 * @returns The `Chain` object associated with the chain `name`
 */
var getByName = function (name) {
    return Object.values(chains_1.chains).find(function (chain) { return chain.name === name; }) || {};
};
/**
 * Get a chain by its `id` or by its `name`.
 * @param idOrName - The name or id of the chain
 * @returns The `Chain` object associated with the `id` or `name`
 */
var get = function (idOrName) {
    return typeof idOrName === 'number' ? getById(idOrName) : getByName(idOrName);
};
/**
 * Gets the entire `chains` object
 * @returns An object containing all chains
 */
var all = function () { return chains_1.chains; };
/**
 * Helper to make accessing the most popular chains easier
 */
exports.chain = {
    ethereum: {
        mainnet: chains_1.chains[enums_1.ChainId.EthereumMainnet],
        rinkeby: chains_1.chains[enums_1.ChainId.Rinkeby],
        ropsten: chains_1.chains[enums_1.ChainId.Ropsten],
        kovan: chains_1.chains[enums_1.ChainId.Kovan],
        goerli: chains_1.chains[enums_1.ChainId.Goerli]
    },
    polygon: {
        mainnet: chains_1.chains[enums_1.ChainId.PolygonMainnet],
        mumbai: chains_1.chains[enums_1.ChainId.Mumbai]
    },
    arbitrum: {
        mainnet: chains_1.chains[enums_1.ChainId.ArbitrumOne],
        rinkeby: chains_1.chains[enums_1.ChainId.ArbitrumRinkeby]
    },
    optimism: {
        mainnet: chains_1.chains[enums_1.ChainId.Optimism],
        kovan: chains_1.chains[enums_1.ChainId.OptimismKovan]
    }
};
exports.default = {
    getById: getById,
    getByName: getByName,
    get: get,
    all: all,
    chain: exports.chain
};
