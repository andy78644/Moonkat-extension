import fs from 'fs';
import path from 'path';
import validateOptions from 'schema-utils';
import { getOptions, interpolateName } from 'loader-utils';
import { browserVendors, LOADER_NAME } from './constants';
import { transformManifest } from './transform';
const packageJSONPath = path.resolve('./package.json');
const schema = {
    type: 'object',
    properties: {
        usePackageJSONVersion: {
            type: 'boolean',
        },
    },
};
export function loader(source) {
    if (this.cacheable) {
        this.cacheable();
    }
    this.addDependency(packageJSONPath);
    const options = getOptions(this);
    validateOptions(schema, options, {
        name: 'Wext Manifest Loader',
    });
    const usePackageJSONVersion = (options.usePackageJSONVersion && true) || false;
    let content = {};
    if (typeof source === 'string') {
        try {
            content = JSON.parse(source);
        }
        catch (err) {
            this.emitError(err);
        }
    }
    const vendor = process.env.TARGET_BROWSER;
    if (vendor) {
        if (!browserVendors.includes(vendor)) {
            return this.emitError(`${LOADER_NAME}: browser ${vendor} is not supported`);
        }
    }
    else {
        return this.emitError(`${LOADER_NAME}: TARGET_BROWSER variable missing`);
    }
    const manifest = transformManifest(content, vendor);
    if (usePackageJSONVersion) {
        try {
            const packageJSON = JSON.parse(fs.readFileSync(packageJSONPath, 'utf-8'));
            manifest.version = packageJSON.version.replace('-beta.', '.');
        }
        catch (err) {
            this.emitError(err);
        }
    }
    const outputPath = interpolateName(this, 'manifest.json', {
        source,
    });
    const publicPath = `__webpack_public_path__ + ${JSON.stringify(outputPath)}`;
    const formattedJson = JSON.stringify(manifest, null, 2)
        .replace(/\u2028/g, '\\u2028')
        .replace(/\u2029/g, '\\u2029');
    this.emitFile(outputPath, formattedJson);
    return `module.exports = ${publicPath};`;
}
